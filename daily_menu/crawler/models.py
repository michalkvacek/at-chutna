from django.db import models

from restaurants.models import Restaurant, Cousine


class RestaurantScraperConfig(models.Model):
    restaurant = models.ForeignKey(
        Restaurant,
        on_delete=models.CASCADE
    )
    menu_scraper = models.CharField(
        max_length=256,
        help_text='Class used for parsing menu',
        blank=True,
        null=True,
    )
    scraper_parameters = models.CharField(
        max_length=4096,
        help_text='Parameters used for menu parser',
        blank=True,
        null=True,
    )
    next_visit = models.DateField(
        help_text="Date of next crawler's visit",
        blank=True,
        null=True,
    )
    next_visit_interval = models.IntegerField(
        help_text="How ofter should this menu be visited? Interval in days.",
        default=1,
    )
    active = models.BooleanField(
        default=True
    )
    last_successful_download = models.DateField(
        help_text="Last successfull menu download",
        blank=True,
        null=True,
    )

    def __str__(self):
        return self.restaurant.name


class RecipeIngredientCrawler(models.Model):
    def __str__(self):
        return self.name

    name = models.CharField(
        max_length=256,
        help_text="Human readable crawler's name",
    )

    crawler_class = models.CharField(
        max_length=256,
        unique=True,
        help_text="Class used for crawling"
    )
    next_visit = models.DateField(
        help_text="Date of next crawler's visit",
        blank=True,
        null=True,
    )
    next_visit_interval = models.IntegerField(
        help_text="How ofter this site with recipes should be visited? Interval in days.",
        default=1,
    )


class RecipeCategory(models.Model):
    def __str__(self):
        return self.name

    name = models.CharField(
        max_length=256
    )
    canonical_name = models.CharField(
        max_length=256,
        help_text="Canonical form generated by czech analyzer in ElasticSearch",
        null=True,
        blank=True,
    )
    is_significant = models.BooleanField(
        default=True
    )
    downloaded_by = models.ForeignKey(
        RecipeIngredientCrawler,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
    )


class Ingredient(models.Model):
    def __str__(self):
        return self.name

    name = models.CharField(
        max_length=256
    )
    canonical_name = models.CharField(
        max_length=256,
        help_text="Canonical form generated by czech analyzer in ElasticSearch",
        blank=True,
        null=True,
    )
    is_significant = models.BooleanField(
        default=True
    )
    is_common = models.BooleanField(
        default=False,
        help_text="Is this ingredient common?"
    )


class Recipe(models.Model):
    def __str__(self):
        return self.name

    name = models.CharField(
        max_length=256
    )

    url = models.CharField(
        max_length=4096,
        help_text="Source URL"
    )

    ingredients = models.ManyToManyField(Ingredient)
    categories = models.ManyToManyField(RecipeCategory)

    downloaded_by = models.ForeignKey(
        RecipeIngredientCrawler,
        null=True,
        blank=True,
        on_delete=models.SET_NULL
    )
